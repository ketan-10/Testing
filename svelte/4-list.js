<script>

	// Change these to true or false to show the different behaviours
	let visibleInfo = false
	let number = ["1-one", "2","3","4 -four","5"]

	function incrementCount() {
		number = [...number, "one more"]
	}
</script>

<h1>Svelte 4 Transition demo</h1>

<label>Transition <input type="checkbox" bind:checked={visibleInfo} /></label>

<div>
	{#if visibleInfo}
	<p>There will be a transition below here.</p>
	{/if}

	{#each number as num}
		<h2>{num}</h2>
	{/each}

	<button on:click={incrementCount}>click me</button>
</div>

//////////////////
/* App.svelte generated by Svelte v4.0.0 */
import {
	SvelteComponent,
	append,
	attr,
	destroy_each,
	detach,
	element,
	ensure_array_like,
	init,
	insert,
	listen,
	noop,
	run_all,
	safe_not_equal,
	set_data,
	space,
	text
} from "svelte/internal";

import "svelte/internal/disclose-version";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[4] = list[i];
	return child_ctx;
}

// (17:1) {#if visibleInfo}
function create_if_block(ctx) {
	let p;

	return {
		c() {
			p = element("p");
			p.textContent = "There will be a transition below here.";
		},
		m(target, anchor) {
			insert(target, p, anchor);
		},
		d(detaching) {
			if (detaching) {
				detach(p);
			}
		}
	};
}

// (21:1) {#each number as num}
function create_each_block(ctx) {
	let h2;
	let t_value = /*num*/ ctx[4] + "";
	let t;

	return {
		c() {
			h2 = element("h2");
			t = text(t_value);
		},
		m(target, anchor) {
			insert(target, h2, anchor);
			append(h2, t);
		},
		p(ctx, dirty) {
			if (dirty & /*number*/ 2 && t_value !== (t_value = /*num*/ ctx[4] + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) {
				detach(h2);
			}
		}
	};
}

function create_fragment(ctx) {
	let h1;
	let t1;
	let label;
	let t2;
	let input;
	let t3;
	let div;
	let t4;
	let t5;
	let button;
	let mounted;
	let dispose;
	let if_block = /*visibleInfo*/ ctx[0] && create_if_block(ctx);
	let each_value = ensure_array_like(/*number*/ ctx[1]);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			h1 = element("h1");
			h1.textContent = "Svelte 4 Transition demo";
			t1 = space();
			label = element("label");
			t2 = text("Transition ");
			input = element("input");
			t3 = space();
			div = element("div");
			if (if_block) if_block.c();
			t4 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t5 = space();
			button = element("button");
			button.textContent = "click me";
			attr(input, "type", "checkbox");
		},
		m(target, anchor) {
			insert(target, h1, anchor);
			insert(target, t1, anchor);
			insert(target, label, anchor);
			append(label, t2);
			append(label, input);
			input.checked = /*visibleInfo*/ ctx[0];
			insert(target, t3, anchor);
			insert(target, div, anchor);
			if (if_block) if_block.m(div, null);
			append(div, t4);

			for (let i = 0; i < each_blocks.length; i += 1) {
				if (each_blocks[i]) {
					each_blocks[i].m(div, null);
				}
			}

			append(div, t5);
			append(div, button);

			if (!mounted) {
				dispose = [
					listen(input, "change", /*input_change_handler*/ ctx[3]),
					listen(button, "click", /*incrementCount*/ ctx[2])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*visibleInfo*/ 1) {
				input.checked = /*visibleInfo*/ ctx[0];
			}

			if (/*visibleInfo*/ ctx[0]) {
				if (if_block) {
					
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(div, t4);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (dirty & /*number*/ 2) {
				each_value = ensure_array_like(/*number*/ ctx[1]);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, t5);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) {
				detach(h1);
				detach(t1);
				detach(label);
				detach(t3);
				detach(div);
			}

			if (if_block) if_block.d();
			destroy_each(each_blocks, detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let visibleInfo = false;
	let number = ["1-one", "2", "3", "4 -four", "5"];

	function incrementCount() {
		$$invalidate(1, number = [...number, "one more"]);
	}

	function input_change_handler() {
		visibleInfo = this.checked;
		$$invalidate(0, visibleInfo);
	}

	return [visibleInfo, number, incrementCount, input_change_handler];
}

class App extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default App;
   
   
